#!/usr/bin/env python

"""
This config file defines the parameters of the detector(gap_detector.py) 
adjustable using the dynamic reconfigure module.
"""

from dynamic_reconfigure.parameter_generator_catkin import *

PACKAGE = "ugoe_gap_detection_ros"
gen = ParameterGenerator()

axis_enum = gen.enum(
    [gen.const("x",        int_t, 0, "X-Axis as depth axis"),
     gen.const("y",        int_t, 1, "Y-Axis as depth axis"),
     gen.const("z",        int_t, 2, "Z-Axis as depth axis")],"")

gen.add("Depthaxis", int_t, 0, 
        "Axis which determines the depth of a gap",
        0, 0, 2, edit_method=axis_enum)

gen.add("Minimum_gap_volume", double_t, 0,
        "Minimum gap volume threshold", 0.0, 0.0, 200.0)
gen.add("Maximum_gap_volume", double_t, 0,
        "Maximum gap volume threshold", 200.0, 0.0, 200.0)

gen.add("create_evaluation",   bool_t,   0, "Evaluate the detector and " +
        "create info file",  False)

thresholding_enum = gen.enum(
    [gen.const("Minimum_Method",        int_t, 0, ""),
     gen.const("Lis_Method",            int_t, 1, ""),
     gen.const("Yen_Method",            int_t, 2, ""),
     gen.const("Otsus_Method",          int_t, 3, "")],"")

gen.add("Automatic_Thresholding", int_t, 0,
        "Method to threshold device surface points from device gap points",
        0, 0, 3, edit_method=thresholding_enum)

otsu_group = gen.add_group("Otsus_Method", type="hide")
otsu_group.add("Bins",                   int_t,    0,
               "Number of bins used to calculate histogram",
               512, 2, 1024)

yens_group = gen.add_group("Yens_Method", type="hide")
yens_group.add("Bins",                   int_t,    0,
               "Number of bins used to calculate histogram",
               512, 2, 1024)

cluster_enum = gen.enum(
    [gen.const("KMeans",        int_t, 0, "K-Means Clustering"),
     gen.const("Birch",         int_t, 1, "Birch Clustering"),
     gen.const("DBscan",        int_t, 2, "DBScan Clustering"),
     gen.const("HDBscan",       int_t, 3, "HDBScan Clustering")],
    "Enum to choose clustering algorithm")

gen.add("Clustering", int_t, 0, "Clustering algorithm",
        2, 0, 3, edit_method=cluster_enum)

kmeans_group = gen.add_group("K_Means", type="hide")
kmeans_group.add("number_of_clusters",     int_t,    0,
                 "The number of clusters to form as well as the number " +
                 "of centroids to generate.",
                 3, 1, 10)

b_group = gen.add_group("Birch", type="hide")
b_group.add("branching_factor",           int_t,    0,
            "Maximum number of subclusters in each node of the Clustering" +
            " Feature Tree",
            50, 2, 200)
b_group.add("threshold",           double_t,    0,
            "The radius of the subcluster obtained by merging a new sample " +
            "and the closest subcluster should be lesser than the threshold",
            0.015, 0.0, 1.0)

dbscan_group = gen.add_group("DBScan", type="hide")
dbscan_group.add("eps",                 double_t,    0,
                 "The maximum distance between two samples for one to be " +
                 "considered as in the neighborhood of the other." ,
                 0.006, 0.0001, 0.02)

hdb_group = gen.add_group("HDBSCAN", type="hide")
hdb_group.add("minimum_cluster_size",      int_t,    0,
              "Smallest size grouping that you wish to consider a cluster",
              50, 5, 150)

exit(gen.generate(PACKAGE, "gap_detector", "detector"))
